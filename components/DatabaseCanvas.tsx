import React, { useCallback, useMemo } from 'react';
import ReactFlow, {
  Node,
  Edge,
  addEdge,
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  Connection,
  BackgroundVariant,
  ReactFlowProvider,
  Panel,
} from 'reactflow';
import 'reactflow/dist/style.css';

// SQL Export helper function
const generateSQLExport = (
  tables: Array<{
    id: string;
    name: string;
    x: number;
    y: number;
    width: number;
    height: number;
    columns: Array<any>;
    rowCount: number;
  }>,
  relationships: Array<{
    id: string;
    fromTable: string;
    fromColumn: string;
    toTable: string;
    toColumn: string;
    type: 'one-to-one' | 'one-to-many' | 'many-to-many';
  }>
) => {
  let sql = '-- Database Schema Export\n-- Generated by MominAI Database Canvas\n\n';

  // Generate CREATE TABLE statements
  tables.forEach(table => {
    sql += `CREATE TABLE ${table.name} (\n`;

    const columnDefs = table.columns.map(col => {
      let def = `  ${col.name} ${col.type.toUpperCase()}`;
      if (col.primaryKey) def += ' PRIMARY KEY';
      if (!col.nullable) def += ' NOT NULL';
      return def;
    });

    sql += columnDefs.join(',\n');
    sql += '\n);\n\n';
  });

  // Add some sample data comments
  sql += '-- Sample Data (Optional)\n';
  tables.forEach(table => {
    if (table.rowCount > 0) {
      sql += `-- ${table.name}: ${table.rowCount} rows\n`;
    }
  });

  return sql;
};

// Custom Database Table Node Component
const DatabaseTableNode = ({ data, selected }: { data: any; selected?: boolean }) => {
  const isEditing = data.editingTableId === data.table.id;
  const [editingColumn, setEditingColumn] = React.useState<string | null>(null);
  const [editValues, setEditValues] = React.useState<{[key: string]: {name: string, type: string}}>({});

  const handleColumnEdit = (columnName: string, field: 'name' | 'type', value: string) => {
    setEditValues(prev => ({
      ...prev,
      [columnName]: {
        ...prev[columnName],
        [field]: value
      }
    }));
  };

  const saveColumnEdit = (columnName: string) => {
    const edits = editValues[columnName];
    if (edits && (edits.name !== data.table.columns.find((c: any) => c.name === columnName)?.name ||
                  edits.type !== data.table.columns.find((c: any) => c.name === columnName)?.type)) {
      const updatedColumns = data.table.columns.map((col: any) =>
        col.name === columnName
          ? { ...col, name: edits.name || col.name, type: edits.type || col.type }
          : col
      );
      data.onEdit({ ...data.table, columns: updatedColumns });
      console.log('Column edited:', columnName, edits);
    }
    setEditingColumn(null);
    setEditValues(prev => {
      const newState = {...prev};
      delete newState[columnName];
      return newState;
    });
  };

  return (
    <div className={`bg-white border-2 rounded-lg shadow-lg transition-all duration-300 min-w-[250px] ${
      selected ? 'border-blue-500 scale-105' : 'border-gray-300 hover:border-gray-500'
    }`}>
      {/* Table Header */}
      <div className="bg-gray-100 px-3 py-2 rounded-t-lg border-b border-gray-300 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <svg className="w-4 h-4 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
          </svg>
          <span className="font-semibold text-black text-sm">{data.table.name}</span>
        </div>
        <div className="flex items-center gap-1">
          <span className="text-xs text-gray-600 bg-gray-200 px-2 py-1 rounded">
            {data.table.rowCount} rows
          </span>
          <button
            onClick={(e) => {
              e.stopPropagation();
              if (isEditing) {
                data.onStopEditing?.();
              } else {
                data.onStartEditing?.(data.table.id);
              }
            }}
            className="p-1 hover:bg-gray-200 rounded transition-colors"
            title="Edit table structure"
          >
            <svg className="w-3 h-3 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
          {data.onDelete && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                if (confirm(`Are you sure you want to delete the "${data.table.name}" table? This cannot be undone!`)) {
                  data.onDelete(data.table.id);
                }
              }}
              className="p-1 hover:bg-red-100 rounded transition-colors"
              title="Delete table"
            >
              <svg className="w-3 h-3 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          )}
        </div>
      </div>

      {/* Table Columns */}
      <div className="p-2">
        {data.table.columns.slice(0, 8).map((column: any) => (
          <div
            key={column.name}
            className="flex items-center justify-between py-1 px-2 rounded text-xs hover:bg-gray-100"
            onClick={(e) => {
              e.stopPropagation();
              if (isEditing) {
                setEditingColumn(column.name);
              }
            }}
          >
            <div className="flex items-center gap-2">
              <span className={`w-2 h-2 rounded-full ${
                column.primaryKey ? 'bg-yellow-500' :
                column.type === 'string' ? 'bg-blue-500' :
                column.type === 'number' ? 'bg-green-500' :
                column.type === 'boolean' ? 'bg-yellow-500' :
                column.type === 'date' ? 'bg-purple-500' :
                'bg-gray-500'
              }`} />
              {editingColumn === column.name ? (
                <input
                  type="text"
                  value={editValues[column.name]?.name || column.name}
                  onChange={(e) => handleColumnEdit(column.name, 'name', e.target.value)}
                  onBlur={() => saveColumnEdit(column.name)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      saveColumnEdit(column.name);
                    }
                  }}
                  className="font-medium text-gray-900 bg-white border border-gray-300 rounded px-1"
                  autoFocus
                  onFocus={(e) => e.target.select()}
                />
              ) : (
                <span className="font-medium text-gray-900">{column.name}</span>
              )}
            </div>
            <div className="flex items-center gap-1">
              {editingColumn === column.name ? (
                <select
                  value={editValues[column.name]?.type || column.type}
                  onChange={(e) => handleColumnEdit(column.name, 'type', e.target.value)}
                  onBlur={() => saveColumnEdit(column.name)}
                  className="text-gray-700 bg-white border border-gray-300 rounded px-1 text-xs"
                  onFocus={(e) => e.target.size = Math.min(8, e.target.options.length)}
                  onBlur={(e) => e.target.size = 1}
                >
                  <option value="string">string</option>
                  <option value="number">number</option>
                  <option value="boolean">boolean</option>
                  <option value="date">date</option>
                  <option value="uuid">uuid</option>
                  <option value="text">text</option>
                  <option value="varchar(255)">varchar(255)</option>
                  <option value="timestamp">timestamp</option>
                </select>
              ) : (
                <span className="text-gray-700">{column.type}</span>
              )}
              {column.primaryKey && (
                <svg className="w-3 h-3 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                </svg>
              )}
              {!column.nullable && <span className="text-red-600">*</span>}
            </div>
          </div>
        ))}

        {data.table.columns.length > 8 && (
          <div className="text-xs text-gray-700 text-center py-1">
            +{data.table.columns.length - 8} more columns
          </div>
        )}

        {isEditing && (
          <div className="mt-2 pt-2 border-t border-gray-200">
            <button
              onClick={() => {
                // Save any pending edits before stopping editing
                if (editingColumn) {
                  saveColumnEdit(editingColumn);
                }
                data.onStopEditing?.();
              }}
              className="w-full py-1 px-2 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
            >
              Done Editing
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// Node types for React Flow
const nodeTypes = {
  databaseTable: DatabaseTableNode,
};

interface DatabaseCanvasProps {
  tables: Array<{
    id: string;
    name: string;
    x: number;
    y: number;
    width: number;
    height: number;
    columns: Array<{
      name: string;
      type: string;
      primaryKey?: boolean;
      nullable?: boolean;
    }>;
    rowCount: number;
  }>;
  relationships?: Array<{
    id: string;
    fromTable: string;
    fromColumn: string;
    toTable: string;
    toColumn: string;
    type: 'one-to-one' | 'one-to-many' | 'many-to-many';
  }>;
  onTableSelect?: (table: any) => void;
  onTableMove?: (tableId: string, x: number, y: number) => void;
  onTableEdit?: (table: any) => void;
  onTableDelete?: (tableId: string) => void;
  onAddTable?: () => void;
  selectedTable?: string;
  onToggleFullscreen?: () => void;
  editingTableId?: string | null;
  onStartEditing?: (tableId: string) => void;
  onStopEditing?: () => void;
}

const DatabaseCanvas: React.FC<DatabaseCanvasProps> = ({
  tables,
  relationships = [],
  onTableSelect,
  onTableMove,
  onTableEdit,
  onTableDelete,
  onAddTable,
  selectedTable,
  onToggleFullscreen,
  editingTableId,
  onStartEditing,
  onStopEditing
}) => {
  // Search and filter state
  const [searchTerm, setSearchTerm] = React.useState('');
  const [filterType, setFilterType] = React.useState('');
  const [showStats, setShowStats] = React.useState(false);
  // Filter tables based on search and filter criteria
  const filteredTables = useMemo(() => {
    return tables.filter((table) => {
      const matchesSearch = searchTerm === '' ||
        table.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        table.columns.some(col => col.name.toLowerCase().includes(searchTerm.toLowerCase()));

      const matchesFilter = filterType === '' ||
        (filterType === 'fact' && table.rowCount > 1000) ||
        (filterType === 'dimension' && table.columns.some(col => col.primaryKey)) ||
        (filterType === 'lookup' && table.columns.length <= 3);

      return matchesSearch && matchesFilter;
    });
  }, [tables, searchTerm, filterType]);

  // Convert tables to React Flow nodes
  const initialNodes: Node[] = useMemo(() =>
    filteredTables.map((table) => ({
      id: table.id,
      type: 'databaseTable',
      position: { x: table.x, y: table.y },
      data: {
        table,
        onEdit: onTableEdit,
        onDelete: onTableDelete,
        editingTableId,
        onStartEditing,
        onStopEditing,
      },
      selected: selectedTable === table.id,
      style: { zIndex: 1 },
    })), [filteredTables, selectedTable, onTableEdit, onTableDelete]
  );

  // Convert relationships to React Flow edges
  const initialEdges: Edge[] = useMemo(() =>
    relationships.map((rel) => ({
      id: rel.id,
      source: rel.fromTable,
      target: rel.toTable,
      type: 'default', // Try default edge type instead of smoothstep
      animated: false, // Disable animation to ensure basic rendering works
      label: rel.type.replace('-', ' '),
      style: {
        stroke: '#ff0000', // Bright red for maximum visibility
        strokeWidth: 4, // Thicker line
        opacity: 1,
      },
      markerEnd: {
        type: 'arrowclosed',
        color: '#ff0000',
        width: 20,
        height: 20,
      },
      labelStyle: {
        fill: '#ffffff',
        fontSize: 14,
        fontWeight: 700,
        background: '#000000',
        padding: '4px 6px',
        borderRadius: '6px',
        opacity: 1,
      },
    })), [relationships]
  );

  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  // Update nodes when initialNodes changes (e.g., when tables are edited or added)
  React.useEffect(() => {
    setNodes(initialNodes);
  }, [initialNodes, setNodes]);

  // Update edges when initialEdges changes - with delay to ensure nodes are rendered first
  React.useEffect(() => {
    console.log('Setting edges:', initialEdges);
    const timer = setTimeout(() => {
      setEdges(initialEdges);
      console.log('Edges set to:', initialEdges.length, 'edges');

      // Force DOM update by triggering a re-render
      setTimeout(() => {
        const canvas = document.querySelector('.database-canvas-container') as HTMLElement;
        if (canvas) {
          canvas.style.display = 'none';
          canvas.offsetHeight; // Trigger reflow
          canvas.style.display = '';
        }
      }, 50);
    }, 100); // Increased delay to ensure nodes are mounted
    return () => clearTimeout(timer);
  }, [initialEdges, setEdges]);


  // Handle new connections
  const onConnect = useCallback(
    (params: Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  // Handle node position changes
  const onNodeDragStop = useCallback((event: any, node: Node) => {
    if (onTableMove) {
      onTableMove(node.id, node.position.x, node.position.y);
    }
  }, [onTableMove]);

  // Handle node selection
  const onNodeClick = useCallback((event: any, node: Node) => {
    if (onTableSelect) {
      onTableSelect(node.data.table);
    }
  }, [onTableSelect]);

  return (
    <div className="database-canvas-container h-full w-full bg-black" style={{ backgroundColor: 'black' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onNodeDragStop={onNodeDragStop}
        onNodeClick={onNodeClick}
        nodeTypes={nodeTypes}
        fitView
        attributionPosition="bottom-left"
        style={{ backgroundColor: 'black' }}
        proOptions={{ hideAttribution: true }}
        edgesUpdatable={true}
        edgesFocusable={true}
        nodesDraggable={true}
        nodesConnectable={true}
        elementsSelectable={true}
        className="[&_.react-flow__edges]:z-[100] [&_.react-flow__edge-path]:stroke-[3px] [&_.react-flow__edge-path]:opacity-100 [&_.react-flow__edge-path]:visible [&_.react-flow__edge-path]:!block [&_.react-flow__edge-path]:!opacity-100 [&_.react-flow__edge-path]:!visible"
      >
        {/* Background with white dots on black background */}
        <Background
          variant={BackgroundVariant.Dots}
          gap={50}
          size={3}
          color="#ffffff"
        />



        {/* Built-in controls */}
        <Controls className="bg-gray-800 border-gray-600 shadow-lg" />

        {/* Smaller Mini map */}
        <MiniMap
          nodeColor={(node) => selectedTable === node.id ? '#3b82f6' : '#ffffff'}
          maskColor="rgba(0, 0, 0, 0.1)"
          className="bg-gray-900 border border-gray-600"
          style={{ height: 120, width: 200 }}
          position="bottom-right"
        />

        {/* Custom control panel */}
        <Panel position="top-left">
          <div className="flex gap-2 p-2 bg-gray-800 rounded-lg border border-gray-600">
            {/* Search and Filter Section */}
            <div className="flex items-center gap-2 mr-2 pr-2 border-r border-gray-600">
              <input
                type="text"
                placeholder="Search tables..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="px-2 py-1 text-xs bg-gray-700 text-white rounded border border-gray-600 focus:outline-none focus:border-blue-500"
                style={{ width: '120px' }}
              />
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="px-2 py-1 text-xs bg-gray-700 text-white rounded border border-gray-600 focus:outline-none focus:border-blue-500"
              >
                <option value="">All Types</option>
                <option value="fact">Fact Tables</option>
                <option value="dimension">Dimension</option>
                <option value="lookup">Lookup</option>
              </select>
            </div>

            {/* Export Button */}
            <button
              onClick={() => {
                // Export schema as SQL
                const sql = generateSQLExport(tables, relationships);
                const blob = new Blob([sql], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'schema.sql';
                a.click();
                URL.revokeObjectURL(url);
              }}
              className="p-2 bg-green-600 text-white rounded-lg shadow-lg hover:bg-green-700 transition-colors border border-green-500"
              title="Export Schema as SQL"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </button>

            {/* Import Button */}
            <button
              onClick={() => {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.sql,.json';
                input.onchange = (e) => {
                  const file = (e.target as HTMLInputElement).files?.[0];
                  if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                      const content = e.target?.result as string;
                      if (file.name.endsWith('.sql')) {
                        // Handle SQL import
                        console.log('SQL import:', content);
                      } else if (file.name.endsWith('.json')) {
                        // Handle JSON import
                        console.log('JSON import:', content);
                      }
                    };
                    reader.readAsText(file);
                  }
                };
                input.click();
              }}
              className="p-2 bg-blue-600 text-white rounded-lg shadow-lg hover:bg-blue-700 transition-colors border border-blue-500"
              title="Import Schema"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
            </button>

            {/* Statistics Button */}
            <button
              onClick={() => setShowStats(!showStats)}
              className="p-2 bg-purple-600 text-white rounded-lg shadow-lg hover:bg-purple-700 transition-colors border border-purple-500"
              title="Show Schema Statistics"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </button>

            {onAddTable && (
              <button
                onClick={onAddTable}
                className="p-2 bg-green-600 text-white rounded-lg shadow-lg hover:bg-green-700 transition-colors border border-green-500"
                title="Add Table"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </button>
            )}
            <button
              onClick={() => {
                const element = document.querySelector('.database-canvas-container');
                if (element) {
                  if (document.fullscreenElement) {
                    document.exitFullscreen();
                  } else {
                    element.requestFullscreen();
                  }
                }
              }}
              className="p-2 bg-gray-700 text-gray-200 rounded-lg shadow-lg hover:bg-gray-600 transition-colors border border-gray-500"
              title="Toggle Fullscreen Database Canvas"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
              </svg>
            </button>
          </div>
        </Panel>

        {/* Statistics Panel */}
        {showStats && (
          <Panel position="top-right">
            <div className="bg-gray-800 text-white p-4 rounded-lg border border-gray-600 min-w-[250px]">
              <h3 className="text-lg font-semibold mb-3 text-blue-400">Schema Statistics</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Total Tables:</span>
                  <span className="font-mono text-green-400">{tables.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Visible Tables:</span>
                  <span className="font-mono text-blue-400">{filteredTables.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Total Columns:</span>
                  <span className="font-mono text-purple-400">
                    {tables.reduce((sum, table) => sum + table.columns.length, 0)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Relationships:</span>
                  <span className="font-mono text-red-400">{relationships.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Total Rows:</span>
                  <span className="font-mono text-yellow-400">
                    {tables.reduce((sum, table) => sum + table.rowCount, 0).toLocaleString()}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Data Types:</span>
                  <span className="font-mono text-cyan-400">
                    {new Set(tables.flatMap(t => t.columns.map(c => c.type))).size}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Orphan Tables:</span>
                  <span className="font-mono text-orange-400">
                    {tables.filter(t => !relationships.some(r => r.fromTable === t.id || r.toTable === t.id)).length}
                  </span>
                </div>
              </div>
            </div>
          </Panel>
        )}
      </ReactFlow>
    </div>
  );
};

export default DatabaseCanvas;